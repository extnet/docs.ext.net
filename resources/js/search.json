[[{"i":"extnet-docs-home","l":"Ext.NET Docs Home","p":["Check out the Getting Started guide and have a new Ext.NET web application up and running within seconds.","Getting Started","License Key Configuration","Localization"]}],[{"l":"Getting Started"},{"l":"Quick start","p":["If you already have the .NET SDK installed, run the following sequence of command line steps:","Within seconds, your new app should be available at http://localhost:5000.","Here's a Getting Started video demonstrating how to install the Ext.NET Template and create a new web app using the above commands."]},{"l":"Installation options","p":["There are several options for quickly creating new Ext.NET Classic projects by using Templates, the Visual Studio Extension, or adding Ext.NET to your project using NuGet packages.","Install the dotnet templates ( details), or","Install the VSIX Extension for Visual Studio ( details), or","Add the NuGet packages to your project ( details)","We'll run through each of these setup techniques, although which to choose will depend on your requirements and personal preference. We use the dotnet command-line templates and Visual Studio Templates almost exclusively, so it would be our recommendation to start with either of the first two options detailed below."]},{"l":"Install dotnet CLI templates","p":["With multi-platform support, including Windows and Mac OS, the dotnet CLI is a handy collection of tools for creating, compiling, running, and publishing .NET applications. With one simple command, Ext.NET can be installed into that toolbox.","We're making the assumption here that you already have .NET Core installed locally, but if not, download and install .NET Core 3.1 SDK first. The dotnet CLI is installed automatically during that process.","With .NET Core installed on your local machine, open a Command-Line or Mac OS Terminal window, run the following command to install the Ext.NET Templates:","Two new project templates will be installed, extnet and extnet-mvc.","The extnet template will create a basic Razor Pages project with Ext.NET installed. The extnet-mvc template creates the same Ext.NET application but with an ASP.NET MVC (Model-View-Controller) project layout.","The next step is to create a new folder for your project and move into that folder:","With those few simple commands, we're now ready to create a new Ext.NET web app from our newly installed templates and open the app in a web browser.","Your new Ext.NET project is now created and the localhost webserver is running.","The above dotnet watch run command will start a local webserver at http://localhost:5000. You can now view the app in a web browser and your new Ext.NET web app should be working correctly.","To view the new project source code, open the project in Visual Studio, or run the code . command to open with Visual Studio Code.","For creating another new app, just create a new folder somewhere then run one command:","Within seconds your new Ext.NET project is created and running on a local webserver."]},{"l":"Tips","p":["Do you already have the Ext.NET dotnet tools installed? Upgrading to the latest release of Ext.NET is oh so simple, just run the same command:","The templates can be removed by running the following command:","The version number of your installed dotnet templates can be retrieved using:"]},{"l":"Install VSIX Visual Studio Extension","p":["The VSIX project template installer is available from the Ext.NET download page or the Visual Studio Marketplace. Running the installer will add the two Ext.NET project templates into your Visual Studio File> New> Project... menu.","Once installed, two new Project templates will be available in Visual Studio:","VSIX create new project","The Visual Studio project templates can also be installed from within Visual Studio using Extensions> Manage Extensions, then searching for Ext.NET. A few clicks and the new project templates will be available.","VS manage extensions"]},{"l":"Add using NuGet","p":["Ext.NET Classic can be installed into your project using NuGet, although as outlined below, some manual configuration of your projects Startup.cs and _ViewImports.cshtml files are required.","In general, the easiest way to get started is by installing the dotnet Ext.NET Templates or VSIX installer for Visual Studio (Windows only)."]},{"l":"NuGet","p":["Install Ext.NET Classic NuGet package using the NuGet CLI."]},{"l":"dotnet CLI","p":["Install Ext.NET Classic NuGet package using the dotnet CLI."]},{"l":"Project setup","p":["Within your ASP.NET Core web project, a few configuration options must be included.","After installing the Ext.NET.Classic package using NuGet or the dotnet CLI, please add the following individual Ext.Net related configurations within your projects Startup.cs file:","Additional details for configuring app.UseExtNetLocalization() are available in the Localization guide.","Your projects _ViewImports.cshtml file requires the addition of a few items as well.","Once installed, you should now have access to all Ext.NET components, the entire Ext.NET API, and Intellisense.","Try adding a simple ext-button to a page:","Check out the download page for links to all installation options and previous releases."]}],[{"l":"License Key Configuration","p":["An Ext.NET license key can be purchased online at ext.net/pricing.","A license key is required to run your Ext.NET app on any location other than your local development machine.","Once a license key has been purchased, you will be sent an email with a key included. To add the license key to your Ext.NET Classic project, two easy steps are required:","Please do not commit your Ext.NET license key to a public source code repository or share anywhere outside of your organization. It is your responsibility to protect your license key."]},{"l":"Two steps to unlock"},{"i":"set-license-key","l":"1️⃣ Set license key","p":["In your project root, at the same level as the .csproj file, do you have an appsettings.json file? If no, please create that file, then add the following ExtNET configuration section. Replace your-license-key-here with your actual license key string.","If your project already has an appsettings.json file, the final content might look something like the following:"]},{"i":"copy-to-output-directory","l":"2️⃣ Copy to output directory","p":["Within your projects .csproj file, add the following section inside the Project node:","The above section instructs the build process to copy the appsettings.json to your /bin folder during compilation. Your appsettings.json file should be deployed along side your projects compiled .dll files.","Your Ext.NET project should now run on any server."]}],[{"l":"Localization","p":["Localization makes UI components more friendly by talking with users in language they speak.","Be sure to review the Getting Started guide for details on how to setup a new project and tips on Startup.cs configuration."]},{"l":"Configuration","p":["Ext.NET localization files are embedded resources, ensure hosting of embedded resources is enabled in Startup.cs. Ext.NET localization middleware must be enabled after app.UseExtNetResources() invocation (not necessarily as the next statement, so feel free to select the best place for it in the request pipeline).","[Optional] The UseExtNetLocalization method accepts a setup action for RequestLocalizationOptions mimicking the signature of the standard UseRequestLocalization method. Internally Ext.NET will resolve supported cultures and initialize the corresponding fields in a RequestLocalizationOptions instance. Feel free to customize it further, e.g.:","Read more about ASP.NET Core localization here.","With the configuration above, lang query string parameter can be used to control UI Culture:","image"]},{"l":"Per-page locale configuration","p":["Ext.NET uses CultureInfo.CurrentUICulture for configuring UI components locale. However, UI Culture can be overridden using ExtResourceManager.Locale property."]},{"l":"Configuration using a Tag Helper"},{"i":"indexcshtml","l":"Index.cshtml"},{"l":"Configuration using a Resource Manager model","p":["As any ohter Ext.NET model, Resource Manager instance can be bound to a ext-resourceManager / tag. This way configuration can be implemented within the view model."]},{"i":"indexcshtml-1","l":"Index.cshtml"},{"i":"indexcshtmlcs","l":"Index.cshtml.cs","p":["Any of configurations above will force Ext.NET to use a custom locale configured for that page. Values coming from Culture Providers configured in Localization middleware are ignored in this case (see below, es query string locale is not applied - de page locale is used instead).","image"]}]]